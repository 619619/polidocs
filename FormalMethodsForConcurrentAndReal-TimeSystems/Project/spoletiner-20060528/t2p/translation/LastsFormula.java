/*
 spoletiner - a TRIO to Promela translator
 Copyright (C) 2006 Domenico Bianculli (bianculli@gmail.com) & Paola Spoletini (spoleti@elet.polimi.it)

 This program is free software; you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation; either version 2 of the License, or
 (at your option) any later version.

 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with this program; if not, write to the Free Software
 Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

 */
package t2p.translation;

import java.util.Map;

import t2p.translation.TranslationUtilities.TemporalQuality;

/*******************************************************************************
 * A (sub)formula containing the Lasts operator.
 * 
 * @author bianculli
 * 
 */
public class LastsFormula extends TrioFormula {

	// the id as generated by the tree parser
	private int id;

	// var used in the child formula
	private String var;

	// right hand of child logic expression
	// var + child_logic == full child logicEx
	// private String child_logicE;

	private TranslationUtilities.Lasting interval;

	private String lvars_format = "\nbool ex_Lasts_%d=0;\nbyte cont_lasts_%d=0;\n";

	private String proc_st_format =
	// "\n\ti=0;" +
	"\n\tif\n\t\t::ex_Lasts_%d->\n\t\t\tif\n\t\t\t\t::cont_lasts_%d<%d && !(%s) -> flag = 1;\n"
			+ "\t\t\t\t::cont_lasts_%d<%d && (%s) -> cont_lasts_%d++;\n"
			+ "\t\t\t\t::cont_lasts_%d==%d -> ex_Lasts_%d=0;\n"
			+ "\t\t\tfi;\n\t\t::!ex_Lasts_%d-> skip;\n\tfi;\n";

	/***************************************************************************
	 * Builds a Lasts formula.
	 * 
	 * @param f
	 *            the child formula
	 * @param t
	 *            temporal expression of the formula
	 * @param id
	 *            id of the formula
	 * @param interval
	 *            interval of the formula
	 * @param constTable
	 *            table for resolving constants name
	 */
	public LastsFormula(TrioFormula f, TermFormula t, int id,
			TranslationUtilities.Lasting interval,
			Map<String, Integer> constTable) {
		this.temporalQuality = TemporalQuality.future;
		// retrieve TermFormula value
		String numericValue = t.eval();
		// suppose t represents a number
		try {
			this.temporalConstant = Integer.parseInt(numericValue);
		}
		// here t is not a number; check in constant Table
		catch (NumberFormatException ex) {
			if (constTable.containsKey(numericValue)) {
				temporalConstant = constTable.get(numericValue);
			} else {
				System.out.println("No suitable numeric instantion found for "
						+ numericValue);
				temporalConstant = 0;
			}
		}
		this.id = id;
		this.interval = interval;
		this.logicExpression = f.getLogicExpression();

		if (f instanceof ExpressionFormula) {
			ExpressionFormula eq = (ExpressionFormula) f;
			this.var = eq.getLeft().eval();
		}

		int j = 0;
		switch (interval) {
		case ee:
			j = this.temporalConstant - 1;
			this.bodyCode=this.externalBodyCode = "\n\t\t\t\t\tex_Lasts_" + id
					+ "=1; cont_lasts_" + id + " = 0;\n";
			break;
		case ei:
			this.bodyCode=this.externalBodyCode = "\n\t\t\t\t\tex_Lasts_" + id
					+ "=1; cont_lasts_" + id + " = 0;\n";
			j = this.temporalConstant;
			break;
		case ie:
			this.bodyCode=this.externalBodyCode = "\n\t\t\t\t\tif\n\t\t\t\t\t\t::"
					+ this.logicExpression + "-> ex_Lasts_" + id
					+ "=1; cont_lasts_" + id + "=0;\n\t\t\t\t\t\t::!("
					+ this.logicExpression
					+ ")-> s=0; goto gen;\n\t\t\t\t\tfi;\n";
			j = this.temporalConstant - 1;
			break;
		case ii:
			this.bodyCode=this.externalBodyCode = "\n\t\t\t\t\tif\n\t\t\t\t\t\t::"
					+ this.logicExpression + "-> ex_Lasts_" + id
					+ "=1; cont_lasts_" + id + "=0;\n\t\t\t\t\t\t::!("
					+ this.logicExpression
					+ ")-> s=0; goto gen;\n\t\t\t\t\tfi;\n";
			j = this.temporalConstant;
			break;
		}

		this.localVariables = String.format(this.lvars_format, id, id);
		this.processStatus = String.format(this.proc_st_format, id, id, j,
				this.logicExpression, id, j, this.logicExpression, id, id, j,
				id, id);
	}

	/***************************************************************************
	 * @return Returns the var.
	 */
	public String getVar() {
		return var;
	}

	/***************************************************************************
	 * @return Returns the interval.
	 */
	public TranslationUtilities.Lasting getInterval() {
		return interval;
	}

	/**
	 * @param interval
	 *            The interval to set.
	 */
	public void setInterval(TranslationUtilities.Lasting interval) {
		this.interval = interval;
	}

	/**
	 * @return Returns the id.
	 */
	public int getId() {
		return id;
	}

	public void setProcessStatusInFutr() {
		int j = 0;
		switch (interval) {
		case ee:
			j = this.temporalConstant - 1;
			this.processStatus = String.format(this.proc_st_format, id, id, j,
					this.logicExpression, id, j, this.logicExpression, id, id,
					j, id, id);
			break;
		case ei:
		case ie:
			j = this.temporalConstant;
			this.processStatus = String.format(this.proc_st_format, id, id, j,
					this.logicExpression, id, j, this.logicExpression, id, id,
					j, id, id);
			break;
		case ii:
			j = this.temporalConstant + 1;
			this.processStatus = String.format(this.proc_st_format, id, id, j,
					this.logicExpression, id, j, this.logicExpression, id, id,
					j, id, id);
			break;
		}
	}

}
